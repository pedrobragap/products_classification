{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "products_classificantion.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3_KFoGY6Bfyf"
      },
      "source": [
        "#PRODUCTS\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zva2Drv38jw6"
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aJA2gNU-8ptO"
      },
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/produtos_tbl_202103111255.csv',sep=';')\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zFBPBh1i8stJ"
      },
      "source": [
        "df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iFBJ-Xv5UgMT"
      },
      "source": [
        "for index, row in df.iterrows():\n",
        "    print(row[\"descricao_item\"], row[\"ncm\"])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SCNKuwiYUDQI"
      },
      "source": [
        "import re\n",
        "\n",
        "for oo in range(len(df)):\n",
        "  print(oo)\n",
        "  produto = df['descricao_item'].iloc[oo]\n",
        "  produto = produto.translate({ord(c): \" \" for c in \"!@#$%^&*()[]{};'.:<>?|`'/~-=_+\"})\n",
        "  b = re.findall('\\d{1,}(?=ML|ml|mL|Ml|LT|lt|Lt|lT|LITROS|LITROS|L|l|.ML|.ml|.mL|.Ml|.LT|.lt|.Lt|.lT|.LITROS|.LITROS|.L|.l)',produto, re.DOTALL)\n",
        "  a = re.findall('\\d{1,10}|\\(.*\\)', produto,re.DOTALL)\n",
        "  c= []\n",
        "  for i in a:\n",
        "      c.append(i.strip())\n",
        "  for i in b:\n",
        "      if i in c:\n",
        "          c.remove(i)\n",
        "  if a:\n",
        "      produto_New = produto\n",
        "      for it in c:\n",
        "          prodss = produto_New.replace(it,'')\n",
        "      \n",
        "      df['descricao_item'].iloc[oo] = prodss.strip()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tR6oKD11VYGh"
      },
      "source": [
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jz2C3RNfojNk",
        "outputId": "42359207-6706-45f2-b3e8-9427abfda6e1"
      },
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv('/content/drive/MyDrive/TCC_PEDRO/data_cleaning.csv',sep=';')\n",
        "df[\"ncm\"] = df[\"ncm\"].astype(str)\n",
        "for i in range(len(df)):\n",
        "  if len(df[\"ncm\"].iloc[i]) < 8:\n",
        "    df[\"ncm\"].iloc[i] = \"0\"+ df[\"ncm\"].iloc[i]\n",
        "df['ncm_in'] = df['ncm'].astype(str).str[:2]\n",
        "df['ncm_out'] = df['ncm'].astype(str).str[2:4]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  iloc._setitem_with_indexer(indexer, value)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "Fx-ngcxuXMdD",
        "outputId": "aab84375-e8ab-476b-dfcb-26748e1d3897"
      },
      "source": [
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>descricao_item</th>\n",
              "      <th>ncm</th>\n",
              "      <th>ncm_in</th>\n",
              "      <th>ncm_out</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>BETAISTINA DICLOR MG  CPS   GEN Dicloridrato d...</td>\n",
              "      <td>30049069</td>\n",
              "      <td>30</td>\n",
              "      <td>04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>BROMOPRIDA MG  CPS   GEN BROMOPRIDA</td>\n",
              "      <td>30049045</td>\n",
              "      <td>30</td>\n",
              "      <td>04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>DESLORATADINA ,MG ML XPE VD 6ML   GEN DESLORAT...</td>\n",
              "      <td>30049069</td>\n",
              "      <td>30</td>\n",
              "      <td>04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>ACETILCISTEINA 600MG G  ENV G   GEN ACETILCIST...</td>\n",
              "      <td>30049059</td>\n",
              "      <td>30</td>\n",
              "      <td>04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>SANDALIA NEW AMAZONAS RETO CAVALERA INV 18 FEM...</td>\n",
              "      <td>64022000</td>\n",
              "      <td>64</td>\n",
              "      <td>02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343242</th>\n",
              "      <td>343242</td>\n",
              "      <td>ZIN  E   MAQUINA DO VIDRO ESQUERDA PINO ALTO</td>\n",
              "      <td>87082999</td>\n",
              "      <td>87</td>\n",
              "      <td>08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343243</th>\n",
              "      <td>343243</td>\n",
              "      <td>ZINCO 100CM  3,50KG P MT  CP</td>\n",
              "      <td>72104910</td>\n",
              "      <td>72</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343244</th>\n",
              "      <td>343244</td>\n",
              "      <td>ZMM 9010811   ALTERNADOR 12V AMP</td>\n",
              "      <td>85115010</td>\n",
              "      <td>85</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343245</th>\n",
              "      <td>343245</td>\n",
              "      <td>ZORDS COM FIGURA E</td>\n",
              "      <td>95030039</td>\n",
              "      <td>95</td>\n",
              "      <td>03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>343246</th>\n",
              "      <td>343246</td>\n",
              "      <td>ZUC ZL   TERMINAL DE DIRECAO ESQUERDO</td>\n",
              "      <td>87089412</td>\n",
              "      <td>87</td>\n",
              "      <td>08</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>343247 rows Ã— 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        Unnamed: 0  ... ncm_out\n",
              "0                0  ...      04\n",
              "1                1  ...      04\n",
              "2                2  ...      04\n",
              "3                3  ...      04\n",
              "4                4  ...      02\n",
              "...            ...  ...     ...\n",
              "343242      343242  ...      08\n",
              "343243      343243  ...      10\n",
              "343244      343244  ...      11\n",
              "343245      343245  ...      03\n",
              "343246      343246  ...      08\n",
              "\n",
              "[343247 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NpNCjGph6VuL"
      },
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv('/content/drive/MyDrive/TCC_PEDRO/data_cleaning.csv',sep=';')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vjh5WFl15qYR"
      },
      "source": [
        "df.columns = ['index','descricao_item','ncm']\n",
        "df = df.drop(columns='index')\n",
        "df[\"ncm\"] = df[\"ncm\"].astype(str)\n",
        "for i in range(len(df)):\n",
        "  if len(df[\"ncm\"].iloc[i]) < 8:\n",
        "    df[\"ncm\"].iloc[i] = \"0\"+ df[\"ncm\"].iloc[i]\n",
        "df['ncm_in'] = df['ncm'].astype(str).str[:2]\n",
        "df['ncm_out'] = df['ncm'].astype(str).str[2:4]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kBmoY7Hy87fb",
        "outputId": "6984e68c-0d94-4d4b-a890-fb5914e12042"
      },
      "source": [
        "df = df.sample(frac = 0.1, random_state=1)\n",
        "df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(34325, 4)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "cxh7Awuq6f77",
        "outputId": "73c6f22a-12cd-4a6e-f0c8-34008d299c37"
      },
      "source": [
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>descricao_item</th>\n",
              "      <th>ncm</th>\n",
              "      <th>ncm_in</th>\n",
              "      <th>ncm_out</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20467</th>\n",
              "      <td>XADREZ ESCOLAR TABULEIRO MADEIRA PCS PLASTICA</td>\n",
              "      <td>95030099</td>\n",
              "      <td>95</td>\n",
              "      <td>03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>263248</th>\n",
              "      <td>SAP  FEMININO TRANCA GASPEA VEGETAL SEDA  SKIN...</td>\n",
              "      <td>64039990</td>\n",
              "      <td>64</td>\n",
              "      <td>03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34065</th>\n",
              "      <td>ANEL BACKUP 101 75 X 107 75 X 1 27 G32176D</td>\n",
              "      <td>40169300</td>\n",
              "      <td>40</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>175826</th>\n",
              "      <td>LAMINA PARA DISPLAY RED BULL</td>\n",
              "      <td>49119900</td>\n",
              "      <td>49</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113343</th>\n",
              "      <td>CONJ REGATA MALHA BERMUDA MICROFIBRA 06</td>\n",
              "      <td>62032300</td>\n",
              "      <td>62</td>\n",
              "      <td>03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>212865</th>\n",
              "      <td>PA SX MA 8 8 5X RI   ZM</td>\n",
              "      <td>73181500</td>\n",
              "      <td>73</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89718</th>\n",
              "      <td>CANETA COMPACTOR ESF  VERMELHA</td>\n",
              "      <td>96081000</td>\n",
              "      <td>96</td>\n",
              "      <td>08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176065</th>\n",
              "      <td>LAMP LED BULB 9W AMARELA BIVOL CX</td>\n",
              "      <td>85395000</td>\n",
              "      <td>85</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>259840</th>\n",
              "      <td>SAND HAV COLOR LAVANDA 33</td>\n",
              "      <td>64022000</td>\n",
              "      <td>64</td>\n",
              "      <td>02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>311962</th>\n",
              "      <td>VESTIDO 00085</td>\n",
              "      <td>61044200</td>\n",
              "      <td>61</td>\n",
              "      <td>04</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>34325 rows Ã— 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                                           descricao_item  ... ncm_out\n",
              "20467       XADREZ ESCOLAR TABULEIRO MADEIRA PCS PLASTICA  ...      03\n",
              "263248  SAP  FEMININO TRANCA GASPEA VEGETAL SEDA  SKIN...  ...      03\n",
              "34065          ANEL BACKUP 101 75 X 107 75 X 1 27 G32176D  ...      16\n",
              "175826                       LAMINA PARA DISPLAY RED BULL  ...      11\n",
              "113343            CONJ REGATA MALHA BERMUDA MICROFIBRA 06  ...      03\n",
              "...                                                   ...  ...     ...\n",
              "212865                            PA SX MA 8 8 5X RI   ZM  ...      18\n",
              "89718                      CANETA COMPACTOR ESF  VERMELHA  ...      08\n",
              "176065                  LAMP LED BULB 9W AMARELA BIVOL CX  ...      39\n",
              "259840                          SAND HAV COLOR LAVANDA 33  ...      02\n",
              "311962                                      VESTIDO 00085  ...      04\n",
              "\n",
              "[34325 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "57HB3yEL8-sA"
      },
      "source": [
        "df['category_id'] = df['ncm_out'].factorize()[0]\n",
        "from io import StringIO\n",
        "category_id_df = df[['ncm_out', 'category_id']].drop_duplicates().sort_values('category_id')\n",
        "category_to_id = dict(category_id_df.values)\n",
        "id_to_category = dict(category_id_df[['category_id', 'ncm_out']].values)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "EEBih6F69BF8",
        "outputId": "97be41bb-61f8-4085-f0b5-71b53d8c7b97"
      },
      "source": [
        "df.tail()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>descricao_item</th>\n",
              "      <th>ncm</th>\n",
              "      <th>ncm_in</th>\n",
              "      <th>ncm_out</th>\n",
              "      <th>category_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>212865</th>\n",
              "      <td>PA SX MA 8 8 5X RI   ZM</td>\n",
              "      <td>73181500</td>\n",
              "      <td>73</td>\n",
              "      <td>18</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89718</th>\n",
              "      <td>CANETA COMPACTOR ESF  VERMELHA</td>\n",
              "      <td>96081000</td>\n",
              "      <td>96</td>\n",
              "      <td>08</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176065</th>\n",
              "      <td>LAMP LED BULB 9W AMARELA BIVOL CX</td>\n",
              "      <td>85395000</td>\n",
              "      <td>85</td>\n",
              "      <td>39</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>259840</th>\n",
              "      <td>SAND HAV COLOR LAVANDA 33</td>\n",
              "      <td>64022000</td>\n",
              "      <td>64</td>\n",
              "      <td>02</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>311962</th>\n",
              "      <td>VESTIDO 00085</td>\n",
              "      <td>61044200</td>\n",
              "      <td>61</td>\n",
              "      <td>04</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                           descricao_item       ncm ncm_in ncm_out  category_id\n",
              "212865            PA SX MA 8 8 5X RI   ZM  73181500     73      18           16\n",
              "89718      CANETA COMPACTOR ESF  VERMELHA  96081000     96      08           15\n",
              "176065  LAMP LED BULB 9W AMARELA BIVOL CX  85395000     85      39           28\n",
              "259840          SAND HAV COLOR LAVANDA 33  64022000     64      02           10\n",
              "311962                      VESTIDO 00085  61044200     61      04            4"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "N3F43LHG9Byg",
        "outputId": "41488d84-1259-482a-ecaf-dc92d61c62b8"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "fig = plt.figure(figsize=(16,6))\n",
        "df.groupby('ncm_out').descricao_item.count().plot.bar(ylim=0)\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pbbJKfWd60Ni",
        "outputId": "440dc50f-3387-4bf7-ae84-dd4d2c3fa424"
      },
      "source": [
        "df.descricao_item"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20467         XADREZ ESCOLAR TABULEIRO MADEIRA PCS PLASTICA\n",
              "263248    SAP  FEMININO TRANCA GASPEA VEGETAL SEDA  SKIN...\n",
              "34065            ANEL BACKUP 101 75 X 107 75 X 1 27 G32176D\n",
              "175826                         LAMINA PARA DISPLAY RED BULL\n",
              "113343              CONJ REGATA MALHA BERMUDA MICROFIBRA 06\n",
              "                                ...                        \n",
              "212865                              PA SX MA 8 8 5X RI   ZM\n",
              "89718                        CANETA COMPACTOR ESF  VERMELHA\n",
              "176065                    LAMP LED BULB 9W AMARELA BIVOL CX\n",
              "259840                            SAND HAV COLOR LAVANDA 33\n",
              "311962                                        VESTIDO 00085\n",
              "Name: descricao_item, Length: 34325, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LkdFYEPd9L-V"
      },
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "tfidf = TfidfVectorizer(sublinear_tf=True, min_df=5, norm='l2', encoding='latin-1', ngram_range=(1, 2), stop_words='english')\n",
        "#pickle.dump(tfidf, open(\"tfidf.pickle\", \"wb\"))\n",
        "features = tfidf.fit_transform(df['descricao_item'].values.astype('U')).toarray()\n",
        "#pickle.dump(features, open(\"features.pickle\", \"wb\"))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HJE5ykRV9Nfm",
        "outputId": "6d6e4b33-200c-416c-dc71-c5b8c578d00d"
      },
      "source": [
        "labels = df.category_id\n",
        "features.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(34325, 9000)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NNVK13yx9SrV",
        "outputId": "8cd7dddd-ae58-4a78-f4ac-1d219e139047"
      },
      "source": [
        "from sklearn.feature_selection import chi2\n",
        "import numpy as np\n",
        "\n",
        "N = 2\n",
        "for mva, category_id in sorted(category_to_id.items()):\n",
        "  features_chi2 = chi2(features, labels == category_id)\n",
        "  #print(np.argsort(features_chi2[0])) #asd\n",
        "  indices = np.argsort(features_chi2[0]) #asd\n",
        "  feature_names = np.array(tfidf.get_feature_names())[indices]\n",
        "  unigrams = [v for v in feature_names if len(v.split(' ')) == 1]\n",
        "  bigrams = [v for v in feature_names if len(v.split(' ')) == 2]\n",
        "  print(\"# '{}':\".format(mva))\n",
        "  print(\"  . Most correlated unigrams:\\n       . {}\".format('\\n       . '.join(unigrams[-N:])))\n",
        "  print(\"  . Most correlated bigrams:\\n       . {}\".format('\\n       . '.join(bigrams[-N:])))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "# '':\n",
            "  . Most correlated unigrams:\n",
            "       . 06mm\n",
            "       . othil\n",
            "  . Most correlated bigrams:\n",
            "       . queijo mussarela\n",
            "       . power tactel\n",
            "# '01':\n",
            "  . Most correlated unigrams:\n",
            "       . linguica\n",
            "       . sab\n",
            "  . Most correlated bigrams:\n",
            "       . coco ralado\n",
            "       . mist bolo\n",
            "# '02':\n",
            "  . Most correlated unigrams:\n",
            "       . sandalia\n",
            "       . hav\n",
            "  . Most correlated bigrams:\n",
            "       . coca cola\n",
            "       . sand hav\n",
            "# '03':\n",
            "  . Most correlated unigrams:\n",
            "       . brinq\n",
            "       . bermuda\n",
            "  . Most correlated bigrams:\n",
            "       . bermuda passeio\n",
            "       . bermuda cor\n",
            "# '04':\n",
            "  . Most correlated unigrams:\n",
            "       . tenis\n",
            "       . vestido\n",
            "  . Most correlated bigrams:\n",
            "       . curto cor\n",
            "       . vestido curto\n",
            "# '05':\n",
            "  . Most correlated unigrams:\n",
            "       . cam\n",
            "       . bisc\n",
            "  . Most correlated bigrams:\n",
            "       . mc sortida\n",
            "       . cam mc\n",
            "# '06':\n",
            "  . Most correlated unigrams:\n",
            "       . regata\n",
            "       . blusa\n",
            "  . Most correlated bigrams:\n",
            "       . blusa regata\n",
            "       . blusa fem\n",
            "# '07':\n",
            "  . Most correlated unigrams:\n",
            "       . cueca\n",
            "       . broca\n",
            "  . Most correlated bigrams:\n",
            "       . piso esm\n",
            "       . broca aco\n",
            "# '08':\n",
            "  . Most correlated unigrams:\n",
            "       . desinf\n",
            "       . calcinha\n",
            "  . Most correlated bigrams:\n",
            "       . calcinha biquini\n",
            "       . pastilha freio\n",
            "# '09':\n",
            "  . Most correlated unigrams:\n",
            "       . amac\n",
            "       . camiseta\n",
            "  . Most correlated bigrams:\n",
            "       . camiseta regata\n",
            "       . camiseta tradicional\n",
            "# '10':\n",
            "  . Most correlated unigrams:\n",
            "       . lubrax\n",
            "       . correia\n",
            "  . Most correlated bigrams:\n",
            "       . lubrax turbo\n",
            "       . correia ind\n",
            "# '11':\n",
            "  . Most correlated unigrams:\n",
            "       . faca\n",
            "       . pneu\n",
            "  . Most correlated bigrams:\n",
            "       . cardigan cor\n",
            "       . smoby mm\n",
            "# '12':\n",
            "  . Most correlated unigrams:\n",
            "       . soutien\n",
            "       . sutia\n",
            "  . Most correlated bigrams:\n",
            "       . lanterna lateral\n",
            "       . com bojo\n",
            "# '13':\n",
            "  . Most correlated unigrams:\n",
            "       . feijao\n",
            "       . bomba\n",
            "  . Most correlated bigrams:\n",
            "       . bomba agua\n",
            "       . camara ar\n",
            "# '14':\n",
            "  . Most correlated unigrams:\n",
            "       . 125\n",
            "       . titan\n",
            "  . Most correlated bigrams:\n",
            "       . preserv prudence\n",
            "       . bravo racing\n",
            "# '15':\n",
            "  . Most correlated unigrams:\n",
            "       . pente\n",
            "       . frigideira\n",
            "  . Most correlated bigrams:\n",
            "       . luva latex\n",
            "       . ferro solda\n",
            "# '16':\n",
            "  . Most correlated unigrams:\n",
            "       . oring\n",
            "       . retentor\n",
            "  . Most correlated bigrams:\n",
            "       . 00 00\n",
            "       . anel oring\n",
            "# '17':\n",
            "  . Most correlated unigrams:\n",
            "       . prego\n",
            "       . sold\n",
            "  . Most correlated bigrams:\n",
            "       . red sold\n",
            "       . luva sold\n",
            "# '18':\n",
            "  . Most correlated unigrams:\n",
            "       . porca\n",
            "       . sx\n",
            "  . Most correlated bigrams:\n",
            "       . papel hig\n",
            "       . pa sx\n",
            "# '19':\n",
            "  . Most correlated unigrams:\n",
            "       . abs\n",
            "       . fralda\n",
            "  . Most correlated bigrams:\n",
            "       . abs int\n",
            "       . fita isolante\n",
            "# '20':\n",
            "  . Most correlated unigrams:\n",
            "       . caderno\n",
            "       . cad\n",
            "  . Most correlated bigrams:\n",
            "       . maxi 15mt\n",
            "       . caderno maxi\n",
            "# '21':\n",
            "  . Most correlated unigrams:\n",
            "       . wega\n",
            "       . filtro\n",
            "  . Most correlated bigrams:\n",
            "       . filtro combustivel\n",
            "       . filtro ar\n",
            "# '22':\n",
            "  . Most correlated unigrams:\n",
            "       . astra\n",
            "       . assento\n",
            "  . Most correlated bigrams:\n",
            "       . arco iris\n",
            "       . assento sanit\n",
            "# '23':\n",
            "  . Most correlated unigrams:\n",
            "       . lixo\n",
            "       . saco\n",
            "  . Most correlated bigrams:\n",
            "       . palha aco\n",
            "       . saco lixo\n",
            "# '24':\n",
            "  . Most correlated unigrams:\n",
            "       . cesto\n",
            "       . mamad\n",
            "  . Most correlated bigrams:\n",
            "       . mamad lolly\n",
            "       . copo desc\n",
            "# '25':\n",
            "  . Most correlated unigrams:\n",
            "       . espacador\n",
            "       . macaco\n",
            "  . Most correlated bigrams:\n",
            "       . bucha fixacao\n",
            "       . macaco hidraulico\n",
            "# '26':\n",
            "  . Most correlated unigrams:\n",
            "       . chup\n",
            "       . abracadeira\n",
            "  . Most correlated bigrams:\n",
            "       . abrac nylon\n",
            "       . enfeite resina\n",
            "# '27':\n",
            "  . Most correlated unigrams:\n",
            "       . cnn\n",
            "       . radio\n",
            "  . Most correlated bigrams:\n",
            "       . cx pcs\n",
            "       . caixa amplificada\n",
            "# '28':\n",
            "  . Most correlated unigrams:\n",
            "       . sanitaria\n",
            "       . tv\n",
            "  . Most correlated bigrams:\n",
            "       . led pol\n",
            "       . agua sanitaria\n",
            "# '29':\n",
            "  . Most correlated unigrams:\n",
            "       . painel\n",
            "       . antena\n",
            "  . Most correlated bigrams:\n",
            "       . xlr 125\n",
            "       . 125 2009\n",
            "# '30':\n",
            "  . Most correlated unigrams:\n",
            "       . escala\n",
            "       . multimetro\n",
            "  . Most correlated bigrams:\n",
            "       . verde agua\n",
            "       . branca kg\n",
            "# '31':\n",
            "  . Most correlated unigrams:\n",
            "       . patrol\n",
            "       . nivel\n",
            "  . Most correlated bigrams:\n",
            "       . sensor temperatura\n",
            "       . nivel aluminio\n",
            "# '32':\n",
            "  . Most correlated unigrams:\n",
            "       . fgr\n",
            "       . jic\n",
            "  . Most correlated bigrams:\n",
            "       . jic 37\n",
            "       . pr capa\n",
            "# '33':\n",
            "  . Most correlated unigrams:\n",
            "       . gatilho\n",
            "       . rc\n",
            "  . Most correlated bigrams:\n",
            "       . cabo plastico\n",
            "       . lamina rocadeira\n",
            "# '34':\n",
            "  . Most correlated unigrams:\n",
            "       . mussarela\n",
            "       . poli\n",
            "  . Most correlated bigrams:\n",
            "       . fita isolante\n",
            "       . terminal fg\n",
            "# '35':\n",
            "  . Most correlated unigrams:\n",
            "       . isolado\n",
            "       . derivacao\n",
            "  . Most correlated bigrams:\n",
            "       . mm vermelho\n",
            "       . conector derivacao\n",
            "# '36':\n",
            "  . Most correlated unigrams:\n",
            "       . tomada\n",
            "       . 2p\n",
            "  . Most correlated bigrams:\n",
            "       . interruptor simples\n",
            "       . fusivel lamina\n",
            "# '37':\n",
            "  . Most correlated unigrams:\n",
            "       . fechada\n",
            "       . transf\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '38':\n",
            "  . Most correlated unigrams:\n",
            "       . quadro\n",
            "       . dist\n",
            "  . Most correlated bigrams:\n",
            "       . vestido curto\n",
            "       . disj din\n",
            "# '39':\n",
            "  . Most correlated unigrams:\n",
            "       . lamp\n",
            "       . lampada\n",
            "  . Most correlated bigrams:\n",
            "       . lampada led\n",
            "       . lamp led\n",
            "# '40':\n",
            "  . Most correlated unigrams:\n",
            "       . milho\n",
            "       . fino\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '41':\n",
            "  . Most correlated unigrams:\n",
            "       . led\n",
            "       . 3000\n",
            "  . Most correlated bigrams:\n",
            "       . vestido curto\n",
            "       . lampada led\n",
            "# '42':\n",
            "  . Most correlated unigrams:\n",
            "       . ext\n",
            "       . biv\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '43':\n",
            "  . Most correlated unigrams:\n",
            "       . impressora\n",
            "       . toner\n",
            "  . Most correlated bigrams:\n",
            "       . controle remoto\n",
            "       . lampada led\n",
            "# '44':\n",
            "  . Most correlated unigrams:\n",
            "       . megatron\n",
            "       . cabo\n",
            "  . Most correlated bigrams:\n",
            "       . cabo flex\n",
            "       . cabo flexivel\n",
            "# '45':\n",
            "  . Most correlated unigrams:\n",
            "       . escova\n",
            "       . carvao\n",
            "  . Most correlated bigrams:\n",
            "       . filtro secador\n",
            "       . jogo escova\n",
            "# '46':\n",
            "  . Most correlated unigrams:\n",
            "       . isolador\n",
            "       . pilar\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '47':\n",
            "  . Most correlated unigrams:\n",
            "       . ox\n",
            "       . x100ml\n",
            "  . Most correlated bigrams:\n",
            "       . laco facil\n",
            "       . agua oxigenada\n",
            "# '48':\n",
            "  . Most correlated unigrams:\n",
            "       . standard\n",
            "       . bril\n",
            "  . Most correlated bigrams:\n",
            "       . tinta esm\n",
            "       . sint bril\n",
            "# '50':\n",
            "  . Most correlated unigrams:\n",
            "       . wanke\n",
            "       . lavadora\n",
            "  . Most correlated bigrams:\n",
            "       . alta pressao\n",
            "       . lavadora alta\n",
            "# '51':\n",
            "  . Most correlated unigrams:\n",
            "       . 17\n",
            "       . pera\n",
            "  . Most correlated bigrams:\n",
            "       . vestido curto\n",
            "       . laranja pera\n",
            "# '52':\n",
            "  . Most correlated unigrams:\n",
            "       . costura\n",
            "       . maquina\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '54':\n",
            "  . Most correlated unigrams:\n",
            "       . aluminio\n",
            "       . concha\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '59':\n",
            "  . Most correlated unigrams:\n",
            "       . furadeira\n",
            "       . pratika\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '60':\n",
            "  . Most correlated unigrams:\n",
            "       . worker\n",
            "       . motor\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '62':\n",
            "  . Most correlated unigrams:\n",
            "       . castanha\n",
            "       . hidraulica\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '65':\n",
            "  . Most correlated unigrams:\n",
            "       . esmerilhadeira\n",
            "       . grampeador\n",
            "  . Most correlated bigrams:\n",
            "       . cx pcs\n",
            "       . em cx\n",
            "# '66':\n",
            "  . Most correlated unigrams:\n",
            "       . brasfort\n",
            "       . mandril\n",
            "  . Most correlated bigrams:\n",
            "       . sem fim\n",
            "       . chave mandril\n",
            "# '67':\n",
            "  . Most correlated unigrams:\n",
            "       . sabre\n",
            "       . skil\n",
            "  . Most correlated bigrams:\n",
            "       . tanque combustivel\n",
            "       . serra marmore\n",
            "# '68':\n",
            "  . Most correlated unigrams:\n",
            "       . corte\n",
            "       . ox\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '70':\n",
            "  . Most correlated unigrams:\n",
            "       . dig\n",
            "       . calculadora\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '71':\n",
            "  . Most correlated unigrams:\n",
            "       . mouse\n",
            "       . 4gb\n",
            "  . Most correlated bigrams:\n",
            "       . preto ref\n",
            "       . preto prata\n",
            "# '72':\n",
            "  . Most correlated unigrams:\n",
            "       . 26\n",
            "       . grampeador\n",
            "  . Most correlated bigrams:\n",
            "       . rf cor\n",
            "       . cor verde\n",
            "# '73':\n",
            "  . Most correlated unigrams:\n",
            "       . 64\n",
            "       . fonte\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '74':\n",
            "  . Most correlated unigrams:\n",
            "       . peneira\n",
            "       . esquerda\n",
            "  . Most correlated bigrams:\n",
            "       . aco carb\n",
            "       . fio mm\n",
            "# '77':\n",
            "  . Most correlated unigrams:\n",
            "       . art\n",
            "       . pneus\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '79':\n",
            "  . Most correlated unigrams:\n",
            "       . graxa\n",
            "       . peca\n",
            "  . Most correlated bigrams:\n",
            "       . vestido curto\n",
            "       . arame liso\n",
            "# '81':\n",
            "  . Most correlated unigrams:\n",
            "       . torn\n",
            "       . torneira\n",
            "  . Most correlated bigrams:\n",
            "       . regulador gas\n",
            "       . registro esfera\n",
            "# '82':\n",
            "  . Most correlated unigrams:\n",
            "       . skf\n",
            "       . rolamento\n",
            "  . Most correlated bigrams:\n",
            "       . rolamento esferas\n",
            "       . rolamento roda\n",
            "# '83':\n",
            "  . Most correlated unigrams:\n",
            "       . bronzina\n",
            "       . polia\n",
            "  . Most correlated bigrams:\n",
            "       . std bronzina\n",
            "       . polia aluminio\n",
            "# '84':\n",
            "  . Most correlated unigrams:\n",
            "       . cabecote\n",
            "       . junta\n",
            "  . Most correlated bigrams:\n",
            "       . jogo junta\n",
            "       . junta cabecote\n",
            "# '87':\n",
            "  . Most correlated unigrams:\n",
            "       . engraxadeira\n",
            "       . graxeiro\n",
            "  . Most correlated bigrams:\n",
            "       . vestido curto\n",
            "       . curva 90\n",
            "# '96':\n",
            "  . Most correlated unigrams:\n",
            "       . super\n",
            "       . linha\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n",
            "# '99':\n",
            "  . Most correlated unigrams:\n",
            "       . porta\n",
            "       . isopor\n",
            "  . Most correlated bigrams:\n",
            "       . cor tam\n",
            "       . vestido curto\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LgnJWAHM9VLp"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfTransformer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "\n",
        "X = np.asarray(df[['descricao_item', 'ncm_in']])\n",
        "Y = np.asarray(df['ncm_out'])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X.astype('U'), Y, random_state = 0)\n",
        "count_vect = CountVectorizer()\n",
        "X_train_counts = count_vect.fit_transform(X_train[:,0],X_train[:,1])\n",
        "tfidf_transformer = TfidfTransformer()\n",
        "X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n",
        "\n",
        "#clf = MultinomialNB().fit(X_train_tfidf, y_train)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FYO2milQ9ZA-",
        "outputId": "bb9c93c0-9423-4543-82ca-8f5f2407726b"
      },
      "source": [
        "#from sklearn.linear_model import LogisticRegression\n",
        "#from sklearn.ensemble import RandomForestClassifier\n",
        "#from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.svm import LinearSVC\n",
        "\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "\n",
        "models = [\n",
        "    #RandomForestClassifier(n_estimators=200, max_depth=3, random_state=0),\n",
        "    LinearSVC(),\n",
        "    #MultinomialNB(),\n",
        "    #LogisticRegression(random_state=0),\n",
        "]\n",
        "CV = 5\n",
        "\n",
        "# coca cola , ncm = 2201\n",
        "#x = [22, coca cola]  \n",
        "#y = 01 ou 2201\n",
        "\n",
        "cv_df = pd.DataFrame(index=range(CV * len(models)))\n",
        "entries = []\n",
        "for model in models:\n",
        "  model_name = model.__class__.__name__\n",
        "  accuracies = cross_val_score(model, features, labels, scoring='accuracy', cv=CV)\n",
        "  for fold_idx, accuracy in enumerate(accuracies):\n",
        "    entries.append((model_name, fold_idx, accuracy))\n",
        "cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', 'accuracy'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:667: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=5.\n",
            "  % (min_groups, self.n_splits)), UserWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "id": "bKner2pY9bD_",
        "outputId": "27f1f46b-1585-4d3a-c50f-ee0cbe1c0616"
      },
      "source": [
        "import seaborn as sns\n",
        "\n",
        "sns.boxplot(x='model_name', y='accuracy', data=cv_df)\n",
        "sns.stripplot(x='model_name', y='accuracy', data=cv_df, \n",
        "              size=16, jitter=True, edgecolor=\"gray\", linewidth=2)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N3CPSNWv9cpi",
        "outputId": "241b37e0-7dcf-483a-9321-1e9211b904c3"
      },
      "source": [
        "cv_df.groupby('model_name').accuracy.mean()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "model_name\n",
              "LinearSVC    0.721282\n",
              "Name: accuracy, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A1pm4TKw9eQ-"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "model = LinearSVC()\n",
        "\n",
        "X_train, X_test, y_train, y_test, indices_train, indices_test = train_test_split(features, labels, df.index, test_size=0.2, random_state=0)\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 711
        },
        "id": "YG1CbW5E9gHa",
        "outputId": "c1541f89-f9b8-4fa4-8227-f212d9ce7894"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "conf_mat = confusion_matrix(y_test, y_pred)\n",
        "fig, ax = plt.subplots(figsize=(8,6))\n",
        "sns.heatmap(conf_mat, annot=True, fmt='d',\n",
        "            xticklabels=category_id_df.NCM.values, yticklabels=category_id_df.NCM.values)\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-40-762c06ee3c89>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m sns.heatmap(conf_mat, annot=True, fmt='d',\n\u001b[0;32m----> 6\u001b[0;31m             xticklabels=category_id_df.NCM.values, yticklabels=category_id_df.NCM.values)\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Actual'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Predicted'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5139\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5140\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5141\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5143\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'NCM'"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "Y6Fej7i99iW1"
      },
      "source": [
        "from IPython.display import display\n",
        "\n",
        "for predicted in category_id_df.category_id:\n",
        "  for actual in category_id_df.category_id:\n",
        "    if predicted != actual:\n",
        "      print(\"'{}' predicted as '{}'.\".format(id_to_category[actual], id_to_category[predicted]))\n",
        "      display(df.loc[indices_test[(y_test == actual) & (y_pred == predicted)]][['ncm', 'descricao_item']])\n",
        "      print('')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "626ZgFEt9kD0",
        "outputId": "0cf8d6d9-c463-4d28-a586-d21abd77262d"
      },
      "source": [
        "model.fit(features, labels)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-3a41430bd37c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6HNj7EoQ9mAC",
        "outputId": "31d743da-0670-4c28-a583-3cca5ca3c1e1"
      },
      "source": [
        "from sklearn.feature_selection import chi2\n",
        "\n",
        "N = 2\n",
        "for NCM, category_id in sorted(category_to_id.items()):\n",
        "  indices = np.argsort(model.coef_[category_id])\n",
        "  feature_names = np.array(tfidf.get_feature_names())[indices]\n",
        "  unigrams = [v for v in reversed(feature_names) if len(v.split(' ')) == 1][:N]\n",
        "  bigrams = [v for v in reversed(feature_names) if len(v.split(' ')) == 2][:N]\n",
        "  print(\"# '{}':\".format(NCM))\n",
        "  print(\"  . Top unigrams:\\n       . {}\".format('\\n       . '.join(unigrams)))\n",
        "  print(\"  . Top bigrams:\\n       . {}\".format('\\n       . '.join(bigrams)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "# '00':\n",
            "  . Top unigrams:\n",
            "       . brim\n",
            "       . automotiva\n",
            "  . Top bigrams:\n",
            "       . aro 14\n",
            "       . mangueira 2tramas\n",
            "# '01':\n",
            "  . Top unigrams:\n",
            "       . boi\n",
            "       . zf\n",
            "  . Top bigrams:\n",
            "       . capa fechada\n",
            "       . polo sallo\n",
            "# '02':\n",
            "  . Top unigrams:\n",
            "       . charque\n",
            "       . cong\n",
            "  . Top bigrams:\n",
            "       . pct 20\n",
            "       . da asa\n",
            "# '03':\n",
            "  . Top unigrams:\n",
            "       . peixe\n",
            "       . pedacos\n",
            "  . Top bigrams:\n",
            "       . 500g cx\n",
            "       . 50 mm\n",
            "# '04':\n",
            "  . Top unigrams:\n",
            "       . iog\n",
            "       . activia\n",
            "  . Top bigrams:\n",
            "       . leite cond\n",
            "       . creme leite\n",
            "# '05':\n",
            "  . Top unigrams:\n",
            "       . 12kg\n",
            "       . arg\n",
            "  . Top bigrams:\n",
            "       . cx 0004\n",
            "       . chave combinada\n",
            "# '06':\n",
            "  . Top unigrams:\n",
            "       . hastes\n",
            "       . trigo\n",
            "  . Top bigrams:\n",
            "       . 18 2c\n",
            "       . 0669a 32\n",
            "# '07':\n",
            "  . Top unigrams:\n",
            "       . alho\n",
            "       . repolho\n",
            "  . Top bigrams:\n",
            "       . feijao carioca\n",
            "       . cx 18\n",
            "# '08':\n",
            "  . Top unigrams:\n",
            "       . 1o\n",
            "       . pera\n",
            "  . Top bigrams:\n",
            "       . coco ralado\n",
            "       . di 19\n",
            "# '09':\n",
            "  . Top unigrams:\n",
            "       . cha\n",
            "       . vacuo\n",
            "  . Top bigrams:\n",
            "       . erva mate\n",
            "       . cha marata\n",
            "# '10':\n",
            "  . Top unigrams:\n",
            "       . arroz\n",
            "       . soluvel\n",
            "  . Top bigrams:\n",
            "       . milho pipoca\n",
            "       . 500g fd\n",
            "# '11':\n",
            "  . Top unigrams:\n",
            "       . canjica\n",
            "       . farinha\n",
            "  . Top bigrams:\n",
            "       . em flocos\n",
            "       . milho sinha\n",
            "# '12':\n",
            "  . Top unigrams:\n",
            "       . semente\n",
            "       . isla\n",
            "  . Top bigrams:\n",
            "       . fd 24\n",
            "       . isla ref\n",
            "# '13':\n",
            "  . Top unigrams:\n",
            "       . 430ml\n",
            "       . sobral\n",
            "  . Top bigrams:\n",
            "       . lixa agua\n",
            "       . bermuda agua\n",
            "# '14':\n",
            "  . Top unigrams:\n",
            "       . vegetal\n",
            "       . climax\n",
            "  . Top bigrams:\n",
            "       . 30 kg\n",
            "       . sc 50\n",
            "# '15':\n",
            "  . Top unigrams:\n",
            "       . margarina\n",
            "       . azeite\n",
            "  . Top bigrams:\n",
            "       . oleo milho\n",
            "       . oleo soja\n",
            "# '16':\n",
            "  . Top unigrams:\n",
            "       . sardinha\n",
            "       . atum\n",
            "  . Top bigrams:\n",
            "       . linguica toscana\n",
            "       . hot dog\n",
            "# '17':\n",
            "  . Top unigrams:\n",
            "       . rapadura\n",
            "       . pirulito\n",
            "  . Top bigrams:\n",
            "       . big big\n",
            "       . sao francisco\n",
            "# '18':\n",
            "  . Top unigrams:\n",
            "       . choc\n",
            "       . bombom\n",
            "  . Top bigrams:\n",
            "       . chocolate em\n",
            "       . choc br\n",
            "# '19':\n",
            "  . Top unigrams:\n",
            "       . bisc\n",
            "       . mac\n",
            "  . Top bigrams:\n",
            "       . doce leite\n",
            "       . batata pringles\n",
            "# '20':\n",
            "  . Top unigrams:\n",
            "       . azeitona\n",
            "       . goiabada\n",
            "  . Top bigrams:\n",
            "       . milho verde\n",
            "       . agua coco\n",
            "# '21':\n",
            "  . Top unigrams:\n",
            "       . molho\n",
            "       . maionese\n",
            "  . Top bigrams:\n",
            "       . temp em\n",
            "       . po marata\n",
            "# '22':\n",
            "  . Top unigrams:\n",
            "       . vinagre\n",
            "       . refrig\n",
            "  . Top bigrams:\n",
            "       . agua mineral\n",
            "       . cola pet\n",
            "# '23':\n",
            "  . Top unigrams:\n",
            "       . racao\n",
            "       . gato\n",
            "  . Top bigrams:\n",
            "       . 20 kg\n",
            "       . ao molho\n",
            "# '24':\n",
            "  . Top unigrams:\n",
            "       . hw18\n",
            "       . cigarro\n",
            "  . Top bigrams:\n",
            "       . 20 200\n",
            "       . ks es\n",
            "# '25':\n",
            "  . Top unigrams:\n",
            "       . seixo\n",
            "       . brita\n",
            "  . Top bigrams:\n",
            "       . 50 kg\n",
            "       . fd 20\n",
            "# '27':\n",
            "  . Top unigrams:\n",
            "       . lubrax\n",
            "       . graxa\n",
            "  . Top bigrams:\n",
            "       . oleo peroba\n",
            "       . cx 24\n",
            "# '28':\n",
            "  . Top unigrams:\n",
            "       . alvejante\n",
            "       . soda\n",
            "  . Top bigrams:\n",
            "       . agua sanit\n",
            "       . agua sanitaria\n",
            "# '29':\n",
            "  . Top unigrams:\n",
            "       . descartavel\n",
            "       . orbi\n",
            "  . Top bigrams:\n",
            "       . alcool sol\n",
            "       . 500ml 0001\n",
            "# '30':\n",
            "  . Top unigrams:\n",
            "       . 5mg\n",
            "       . cpr\n",
            "  . Top bigrams:\n",
            "       . ml unica\n",
            "       . comp 12\n",
            "# '31':\n",
            "  . Top unigrams:\n",
            "       . forth\n",
            "       . c24\n",
            "  . Top bigrams:\n",
            "       . corda varal\n",
            "       . baby look\n",
            "# '32':\n",
            "  . Top unigrams:\n",
            "       . corante\n",
            "       . tinta\n",
            "  . Top bigrams:\n",
            "       . massa corrida\n",
            "       . sp pratik\n",
            "# '33':\n",
            "  . Top unigrams:\n",
            "       . tint\n",
            "       . muriel\n",
            "  . Top bigrams:\n",
            "       . bom ar\n",
            "       . cor ton\n",
            "# '34':\n",
            "  . Top unigrams:\n",
            "       . sab\n",
            "       . sabao\n",
            "  . Top bigrams:\n",
            "       . lustra moveis\n",
            "       . vela aniv\n",
            "# '35':\n",
            "  . Top unigrams:\n",
            "       . cola\n",
            "       . tekbond\n",
            "  . Top bigrams:\n",
            "       . fita dupla\n",
            "       . veda calha\n",
            "# '36':\n",
            "  . Top unigrams:\n",
            "       . fogos\n",
            "       . bastao\n",
            "  . Top bigrams:\n",
            "       . fogos artificios\n",
            "       . cor 50000\n",
            "# '37':\n",
            "  . Top unigrams:\n",
            "       . bag\n",
            "       . high\n",
            "  . Top bigrams:\n",
            "       . broca aco\n",
            "       . aco rapido\n",
            "# '38':\n",
            "  . Top unigrams:\n",
            "       . desinf\n",
            "       . amac\n",
            "  . Top bigrams:\n",
            "       . fluido freio\n",
            "       . 1kg cx\n",
            "# '39':\n",
            "  . Top unigrams:\n",
            "       . lixo\n",
            "       . uz\n",
            "  . Top bigrams:\n",
            "       . kit completo\n",
            "       . pote band\n",
            "# '40':\n",
            "  . Top unigrams:\n",
            "       . correia\n",
            "       . pneu\n",
            "  . Top bigrams:\n",
            "       . camara ar\n",
            "       . anel backup\n",
            "# '41':\n",
            "  . Top unigrams:\n",
            "       . siena\n",
            "       . raspa\n",
            "  . Top bigrams:\n",
            "       . jaqueta tradicional\n",
            "       . ketchup heinz\n",
            "# '42':\n",
            "  . Top unigrams:\n",
            "       . bolsa\n",
            "       . mochila\n",
            "  . Top bigrams:\n",
            "       . 0002 cafe\n",
            "       . artigo escolar\n",
            "# '44':\n",
            "  . Top unigrams:\n",
            "       . bambu\n",
            "       . madeira\n",
            "  . Top bigrams:\n",
            "       . em toras\n",
            "       . madeira em\n",
            "# '46':\n",
            "  . Top unigrams:\n",
            "       . completa\n",
            "       . parede\n",
            "  . Top bigrams:\n",
            "       . sapata freio\n",
            "       . anel oring\n",
            "# '47':\n",
            "  . Top unigrams:\n",
            "       . magica\n",
            "       . 140\n",
            "  . Top bigrams:\n",
            "       . 35 36\n",
            "       . ext tomate\n",
            "# '48':\n",
            "  . Top unigrams:\n",
            "       . guardanapo\n",
            "       . papel\n",
            "  . Top bigrams:\n",
            "       . fita crepe\n",
            "       . prato laminado\n",
            "# '49':\n",
            "  . Top unigrams:\n",
            "       . livro\n",
            "       . mobile\n",
            "  . Top bigrams:\n",
            "       . red bull\n",
            "       . br mania\n",
            "# '52':\n",
            "  . Top unigrams:\n",
            "       . barbante\n",
            "       . tricoline\n",
            "  . Top bigrams:\n",
            "       . toalha banho\n",
            "       . coador cafe\n",
            "# '53':\n",
            "  . Top unigrams:\n",
            "       . estopa\n",
            "       . abacate\n",
            "  . Top bigrams:\n",
            "       . 00004 tam\n",
            "       . cor 00004\n",
            "# '54':\n",
            "  . Top unigrams:\n",
            "       . linha\n",
            "       . trico\n",
            "  . Top bigrams:\n",
            "       . tecido crepe\n",
            "       . est mt\n",
            "# '55':\n",
            "  . Top unigrams:\n",
            "       . magna\n",
            "       . viscose\n",
            "  . Top bigrams:\n",
            "       . na cor\n",
            "       . verde bandeira\n",
            "# '56':\n",
            "  . Top unigrams:\n",
            "       . corda\n",
            "       . tnt\n",
            "  . Top bigrams:\n",
            "       . linha pedreiro\n",
            "       . hastes flex\n",
            "# '57':\n",
            "  . Top unigrams:\n",
            "       . tapete\n",
            "       . banheiro\n",
            "  . Top bigrams:\n",
            "       . algodao cor\n",
            "       . comp 100\n",
            "# '58':\n",
            "  . Top unigrams:\n",
            "       . 200f\n",
            "       . coador\n",
            "  . Top bigrams:\n",
            "       . cor branco\n",
            "       . 100 poliester\n",
            "# '59':\n",
            "  . Top unigrams:\n",
            "       . imperial\n",
            "       . dianteiro\n",
            "  . Top bigrams:\n",
            "       . freio ar\n",
            "       . abracadeira nylon\n",
            "# '60':\n",
            "  . Top unigrams:\n",
            "       . basica\n",
            "       . ultra\n",
            "  . Top bigrams:\n",
            "       . renda na\n",
            "       . tecido tule\n",
            "# '61':\n",
            "  . Top unigrams:\n",
            "       . camiseta\n",
            "       . calcinha\n",
            "  . Top bigrams:\n",
            "       . camisa fem\n",
            "       . calca infantil\n",
            "# '62':\n",
            "  . Top unigrams:\n",
            "       . bermuda\n",
            "       . sutia\n",
            "  . Top bigrams:\n",
            "       . bermuda microfibra\n",
            "       . fem ml\n",
            "# '63':\n",
            "  . Top unigrams:\n",
            "       . flanela\n",
            "       . rosto\n",
            "  . Top bigrams:\n",
            "       . kit berco\n",
            "       . pano prato\n",
            "# '64':\n",
            "  . Top unigrams:\n",
            "       . tenis\n",
            "       . sandalia\n",
            "  . Top bigrams:\n",
            "       . az az\n",
            "       . calc fem\n",
            "# '65':\n",
            "  . Top unigrams:\n",
            "       . bone\n",
            "       . capacete\n",
            "  . Top bigrams:\n",
            "       . san marino\n",
            "       . esportivo ua\n",
            "# '66':\n",
            "  . Top unigrams:\n",
            "       . guarda\n",
            "       . chuva\n",
            "  . Top bigrams:\n",
            "       . 100 poliester\n",
            "       . cam jv\n",
            "# '67':\n",
            "  . Top unigrams:\n",
            "       . bq\n",
            "       . ht\n",
            "  . Top bigrams:\n",
            "       . bq rosa\n",
            "       . azul claro\n",
            "# '68':\n",
            "  . Top unigrams:\n",
            "       . lixa\n",
            "       . esponja\n",
            "  . Top bigrams:\n",
            "       . lona freio\n",
            "       . pedra afiar\n",
            "# '69':\n",
            "  . Top unigrams:\n",
            "       . porcelana\n",
            "       . porc\n",
            "  . Top bigrams:\n",
            "       . brilho extra\n",
            "       . piso esm\n",
            "# '70':\n",
            "  . Top unigrams:\n",
            "       . nadir\n",
            "       . vidro\n",
            "  . Top bigrams:\n",
            "       . copo vidro\n",
            "       . vidro com\n",
            "# '71':\n",
            "  . Top unigrams:\n",
            "       . pulseira\n",
            "       . colar\n",
            "  . Top bigrams:\n",
            "       . pulseira dourada\n",
            "       . conj camiseta\n",
            "# '72':\n",
            "  . Top unigrams:\n",
            "       . vergalhao\n",
            "       . ga\n",
            "  . Top bigrams:\n",
            "       . barra chata\n",
            "       . 6m fx1t\n",
            "# '73':\n",
            "  . Top unigrams:\n",
            "       . prego\n",
            "       . parafuso\n",
            "  . Top bigrams:\n",
            "       . esticador cordoalha\n",
            "       . porca roda\n",
            "# '74':\n",
            "  . Top unigrams:\n",
            "       . sifao\n",
            "       . cobertura\n",
            "  . Top bigrams:\n",
            "       . ar li\n",
            "       . para tubo\n",
            "# '76':\n",
            "  . Top unigrams:\n",
            "       . hotel\n",
            "       . assadeira\n",
            "  . Top bigrams:\n",
            "       . cm fosco\n",
            "       . papel aluminio\n",
            "# '78':\n",
            "  . Top unigrams:\n",
            "       . grs\n",
            "       . peso\n",
            "  . Top bigrams:\n",
            "       . 30 cpr\n",
            "       . univ cd\n",
            "# '79':\n",
            "  . Top unigrams:\n",
            "       . zamac\n",
            "       . registro\n",
            "  . Top bigrams:\n",
            "       . branco branco\n",
            "       . fem yonders\n",
            "# '80':\n",
            "  . Top unigrams:\n",
            "       . 170\n",
            "       . sc\n",
            "  . Top bigrams:\n",
            "       . hav slim\n",
            "       . milho quebrado\n",
            "# '82':\n",
            "  . Top unigrams:\n",
            "       . broca\n",
            "       . faca\n",
            "  . Top bigrams:\n",
            "       . pa bico\n",
            "       . em cx\n",
            "# '83':\n",
            "  . Top unigrams:\n",
            "       . cadeado\n",
            "       . fechadura\n",
            "  . Top bigrams:\n",
            "       . rebite aluminio\n",
            "       . mao francesa\n",
            "# '84':\n",
            "  . Top unigrams:\n",
            "       . polia\n",
            "       . torneira\n",
            "  . Top bigrams:\n",
            "       . 6x1 ref\n",
            "       . pr capa\n",
            "# '85':\n",
            "  . Top unigrams:\n",
            "       . lanterna\n",
            "       . interruptor\n",
            "  . Top bigrams:\n",
            "       . cabo flexivel\n",
            "       . ac el\n",
            "# '86':\n",
            "  . Top unigrams:\n",
            "       . carreta\n",
            "       . grande\n",
            "  . Top bigrams:\n",
            "       . patim freio\n",
            "       . mola patim\n",
            "# '87':\n",
            "  . Top unigrams:\n",
            "       . adaptavel\n",
            "       . bieleta\n",
            "  . Top bigrams:\n",
            "       . reservatorio agua\n",
            "       . tambor freio\n",
            "# '90':\n",
            "  . Top unigrams:\n",
            "       . trena\n",
            "       . esquadro\n",
            "  . Top bigrams:\n",
            "       . hipod vet\n",
            "       . agulhas hipod\n",
            "# '91':\n",
            "  . Top unigrams:\n",
            "       . relogio\n",
            "       . pulso\n",
            "  . Top bigrams:\n",
            "       . relogio parede\n",
            "       . pulso aco\n",
            "# '92':\n",
            "  . Top unigrams:\n",
            "       . 111\n",
            "       . 1100\n",
            "  . Top bigrams:\n",
            "       . meia lua\n",
            "       . cano baixo\n",
            "# '93':\n",
            "  . Top unigrams:\n",
            "       . chumbinho\n",
            "       . esping\n",
            "  . Top bigrams:\n",
            "       . chumbinho esping\n",
            "       . camiseta regata\n",
            "# '94':\n",
            "  . Top unigrams:\n",
            "       . cadeira\n",
            "       . poltrona\n",
            "  . Top bigrams:\n",
            "       . guarda roupa\n",
            "       . pp virgem\n",
            "# '95':\n",
            "  . Top unigrams:\n",
            "       . brinq\n",
            "       . anzol\n",
            "  . Top bigrams:\n",
            "       . destroyer 5cm\n",
            "       . 00 az\n",
            "# '96':\n",
            "  . Top unigrams:\n",
            "       . fralda\n",
            "       . pente\n",
            "  . Top bigrams:\n",
            "       . rolo la\n",
            "       . marca texto\n",
            "# '98':\n",
            "  . Top unigrams:\n",
            "       . mol\n",
            "       . vara\n",
            "  . Top bigrams:\n",
            "       . cx 0012\n",
            "       . curto cor\n",
            "# '99':\n",
            "  . Top unigrams:\n",
            "       . brinde\n",
            "       . alca\n",
            "  . Top bigrams:\n",
            "       . titan fan\n",
            "       . fan 125\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3HQnFKdP9_F0"
      },
      "source": [
        "with open('model','wb') as f:\n",
        "  pickle.dump(model,f)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ki9TgcMH92U0"
      },
      "source": [
        "with open('model','rb') as f: \n",
        "  mp = pickle.load(f)\n",
        "\n",
        "tfidf = pickle.load(open(\"tfidf.pickle\", \"rb\"))\n",
        "features = pickle.load(open(\"features.pickle\", \"rb\"))\n",
        "features = tfidf.fit_transform(df.Desc).toarray()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9xe-z4Q8-D6r",
        "outputId": "feca2c0e-4674-4ac0-b28a-61d762d4eac9"
      },
      "source": [
        "texts = [\"salgadinho sol hits 300g\"] #aqui tambÃ©m\n",
        "text_features = tfidf.transform(texts)\n",
        "predictions = mp.predict(text_features)\n",
        "for text, predicted in zip(texts, predictions):\n",
        "  print('\"{}\"'.format(text))\n",
        "  print(\"  - Predicted as: '{}'\".format(id_to_category[predicted]))\n",
        "  print(\"\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\"salgadinho sol hits 300g\"\n",
            "  - Predicted as: '19'\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}